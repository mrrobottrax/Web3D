"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Float16 = /** @class */ (function () {
    function Float16() {
    }
    Float16.ByteToFloat16 = function (uint16) {
        var d = uint16;
        var negative = ((d >> 15) & 1) != 0;
        var mask = 31;
        var exponent = (d >> 10) & mask;
        var significand = d & 1023;
        if (exponent == 0 && significand == 0) {
            return negative ? -0 : 0;
        }
        if (exponent == mask) {
            if (significand == 0) {
                return negative ? -Infinity : Infinity;
            }
            else {
                return NaN;
            }
        }
        var f = 0;
        if (exponent == 0) {
            f = significand / 512.0;
        }
        else {
            f = (1.0 + significand / 1024.0);
        }
        return (negative ? -1.0 : 1.0) * Math.pow(2, exponent - 15) * f;
    };
    Float16.Float16ToByte = function (float16) {
        var f = float16;
        if (isNaN(f))
            return 31745;
        if (1 / f === -Infinity)
            return 32768;
        if (f === 0)
            return 0;
        if (f === -Infinity)
            return 64512;
        if (f === Infinity)
            return 31744;
        var negative = f < 0;
        f = Math.abs(f);
        var fe = Math.floor(f);
        var e = 0;
        var si = 0;
        if (fe > 0) {
            while (fe > 0) {
                e++;
                fe = fe >> 1;
            }
            e += 14;
            var em = Math.pow(2, e - 15);
            var s = f / em - 1.0;
            si = Math.round(s * 1024);
        }
        else {
            var fi = f * (1 << 15);
            fe = Math.floor(fi);
            if (fe > 0) {
                while (fe > 0) {
                    e++;
                    fe = fe >> 1;
                }
                e--;
            }
            if (e == 0) {
                si = Math.round(fi * 512);
            }
            else {
                var em = 1 << e;
                var s = fi / em - 1.0;
                si = Math.round(s * 1024);
            }
        }
        return ((e << 10) + si) + (negative ? 1 << 15 : 0);
    };
    return Float16;
}());
exports.Float16 = Float16;
