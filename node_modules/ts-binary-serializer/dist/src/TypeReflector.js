"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TypeMetaClass_1 = require("./TypeMetaClass");
var DataType_1 = require("./DataType");
var TypeReflector = /** @class */ (function () {
    function TypeReflector() {
    }
    TypeReflector.registerInternal = function (type) {
        var prototype = type.prototype;
        var meta = TypeReflector.meta;
        for (var i = 0, len = meta.length; i < len; i++) {
            var m = meta[i];
            if (m.prototype === prototype) {
                return;
            }
        }
        var metaclass = new TypeMetaClass_1.TypeMetaClass();
        metaclass.prototype = prototype;
        TypeReflector.meta.push(metaclass);
    };
    TypeReflector.register = function (proto, property, type, array, ptype) {
        if (array === void 0) { array = false; }
        var metaclass = TypeReflector.getMetaClass(proto);
        if (metaclass == null) {
            metaclass = new TypeMetaClass_1.TypeMetaClass();
            metaclass.prototype = proto;
            metaclass.properties = [];
            TypeReflector.meta.push(metaclass);
        }
        var mp = new TypeMetaClass_1.TypeMetaProperty(property, type, array);
        if (type == DataType_1.DataType.Object || type == DataType_1.DataType.Map) {
            if (typeof ptype === "number") {
                if (ptype == DataType_1.DataType.Null || ptype == DataType_1.DataType.Object || ptype == DataType_1.DataType.Map) {
                    throw new Error("invalid pclass for object/map");
                }
                mp.pclass = ptype;
            }
            else {
                mp.pclass = TypeReflector.getMetaClass(ptype.prototype);
            }
        }
        else if (type == DataType_1.DataType.TypedArray) {
            mp.pclass = TypeReflector.getMetaClass(ptype.prototype);
        }
        metaclass.properties.push(mp);
    };
    TypeReflector.getMetaClass = function (prototype) {
        var meta = TypeReflector.meta;
        for (var i = 0, len = meta.length; i < len; i++) {
            var m = meta[i];
            if (m.prototype === prototype) {
                return m;
            }
        }
        return null;
    };
    TypeReflector.meta = [];
    return TypeReflector;
}());
exports.TypeReflector = TypeReflector;
TypeReflector.registerInternal(Uint8Array);
TypeReflector.registerInternal(Uint16Array);
TypeReflector.registerInternal(Uint32Array);
TypeReflector.registerInternal(Int8Array);
TypeReflector.registerInternal(Int16Array);
TypeReflector.registerInternal(Int32Array);
TypeReflector.registerInternal(Float32Array);
TypeReflector.registerInternal(Float64Array);
