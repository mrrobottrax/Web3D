"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var TypeReflector_1 = require("./TypeReflector");
var BinaryBuffer_1 = require("./BinaryBuffer");
var BInaryBufferDebug_1 = require("./BInaryBufferDebug");
__export(require("./DataType"));
__export(require("./SerializeField"));
var BinarySerializeOptions = /** @class */ (function () {
    function BinarySerializeOptions() {
        this.fastUTF8string = true;
    }
    return BinarySerializeOptions;
}());
exports.BinarySerializeOptions = BinarySerializeOptions;
var BinaryDeserializeOptions = /** @class */ (function () {
    function BinaryDeserializeOptions() {
        this.fastUTF8string = true;
    }
    return BinaryDeserializeOptions;
}());
exports.BinaryDeserializeOptions = BinaryDeserializeOptions;
var BinarySerializer;
(function (BinarySerializer) {
    function preSerialize(obj, type) {
        var p = Object.getPrototypeOf(obj);
        if (p == null || p.constructor.name == "Object") {
            if (type == null) {
                throw new Error('param type is required.');
            }
            p = type.prototype;
        }
        var mc = TypeReflector_1.TypeReflector.getMetaClass(p);
        if (mc == null) {
            var msg = "reflect class: " + p.name + " invalid";
            throw new Error(msg);
        }
        mc.sortProperty();
        return mc;
    }
    function preDeserialize(type) {
        var obj = Object.create(type.prototype);
        var mc = TypeReflector_1.TypeReflector.getMetaClass(type.prototype);
        if (mc == null) {
            var msg = "reflect class " + type.prototype + " invalid.";
            throw new Error(msg);
        }
        mc.sortProperty();
        return [obj, mc];
    }
    function Serialize(obj, type, options) {
        var mc = preSerialize(obj, type);
        if (options == null)
            options = new BinaryDeserializeOptions();
        var binarybuffer = BinaryBuffer_1.BinaryBuffer.create(options);
        binarybuffer.serialize(mc, obj);
        return binarybuffer.m_arrayBuffer.slice(0, binarybuffer.pos);
    }
    BinarySerializer.Serialize = Serialize;
    function SerializeWithDebugInfo(obj, type, options) {
        var mc = preSerialize(obj, type);
        if (options == null)
            options = new BinaryDeserializeOptions();
        var buffer = BinaryBuffer_1.BinaryBuffer.create(options);
        var binarybuffer = BInaryBufferDebug_1.BinaryBufferDebug.Gen(buffer);
        binarybuffer.serialize(mc, obj);
        var arraybuf = binarybuffer.m_arrayBuffer.slice(0, binarybuffer.pos);
        return [arraybuf, binarybuffer.dbginfo];
    }
    BinarySerializer.SerializeWithDebugInfo = SerializeWithDebugInfo;
    function Deserialize(databuffer, type, options) {
        var _a = preDeserialize(type), obj = _a[0], mc = _a[1];
        if (options == null)
            options = new BinaryDeserializeOptions();
        var binarybuffer = BinaryBuffer_1.BinaryBuffer.createWithView(databuffer, 0, databuffer.byteLength, options);
        return binarybuffer.deserialize(obj, mc);
    }
    BinarySerializer.Deserialize = Deserialize;
    function DeserializeWithDebugInfo(databuffer, type, options) {
        var _a = preDeserialize(type), obj = _a[0], mc = _a[1];
        if (options == null)
            options = new BinaryDeserializeOptions();
        var buffer = BinaryBuffer_1.BinaryBuffer.createWithView(databuffer, 0, databuffer.byteLength, options);
        var binarybuffer = BInaryBufferDebug_1.BinaryBufferDebug.Gen(buffer);
        try {
            var ret = binarybuffer.deserialize(obj, mc);
            return [ret, binarybuffer.dbginfo];
        }
        catch (e) {
            if (options.serializeDbgInfo != null) {
                options.serializeDbgInfo.verifyException(binarybuffer.dbginfo);
            }
            else {
                console.error(binarybuffer.dbginfo);
            }
            throw e;
        }
    }
    BinarySerializer.DeserializeWithDebugInfo = DeserializeWithDebugInfo;
})(BinarySerializer = exports.BinarySerializer || (exports.BinarySerializer = {}));
