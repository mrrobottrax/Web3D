import { TypeMetaClass, TypeMetaProperty } from "./TypeMetaClass";
import { DataType } from "./DataType";
declare type TypeMeta = TypeMetaClass | DataType;
declare type TypedArray = Uint8Array | Uint16Array | Uint32Array | Int32Array | Int16Array | Int8Array | Float32Array | Float64Array;
export declare class BinaryBufferOptions {
    fastUTF8string?: boolean;
}
export declare class BinaryBuffer {
    private m_options;
    readonly options: BinaryBufferOptions;
    m_arrayBuffer: Uint8Array;
    private static readonly DEFAULT_BUFFER_SIZE;
    private m_arrayBufferCurrentSize;
    private m_view;
    private m_pos;
    private constructor();
    private static WriteFuncMap;
    private static ReadFuncMap;
    static initialize(): void;
    readonly pos: number;
    static create(options?: BinaryBufferOptions): BinaryBuffer;
    checkBufferExpand(appendSize?: number): void;
    static createWithView(arybuffer: Uint8Array | ArrayBuffer, offset: number, bytesize: number, options?: BinaryBufferOptions): BinaryBuffer;
    writeProperty(val: any, p: TypeMetaProperty): void;
    readProperty(p: TypeMetaProperty): any;
    writeMap<T extends TypeMetaClass | DataType>(o: {
        [key: string]: any;
    }, tmc?: T): void;
    readMap<T extends TypeMeta>(tmc: T): {
        [key: string]: any;
    } | null;
    writeFloat16(v: number): void;
    readFloat16(): number;
    writeFloat32(v: number): void;
    readFloat32(): number;
    writeFloat64(v: number): void;
    readFloat64(): number;
    writeVarint32(v: number): void;
    readVarint32(): number;
    writeUVarint32(v: number): void;
    readUVarint32(): number;
    writeTypedArray(v: TypedArray, tmc: TypeMetaClass): void;
    private static TypedArrayWriteMap;
    private static TypedArrrayReadMap;
    readTypedArray(tmc: TypeMetaClass): object;
    writeInt8(v: number): void;
    readInt8(): number;
    writeUint8(v: number): void;
    readUint8(): number;
    writeInt16(v: number): void;
    readInt16(): number;
    writeUint16(v: number): void;
    readUint16(): number;
    writeInt32(v: number): void;
    readInt32(): number;
    writeUint32(v: number): void;
    readUint32(): number;
    writeBool(b: boolean): void;
    readBool(): boolean;
    writeString(str: string): void;
    readString(): string;
    writeUTF8Str(str: string): void;
    readUTF8Str(): string;
    writeType(t: DataType): void;
    readType(): DataType;
    writeObject(o: any, tmc: TypeMetaClass): void;
    readObject(tmc: TypeMetaClass): any;
    serialize<T>(mc: TypeMetaClass, obj: T): void;
    deserialize<T>(tar: T, mc: TypeMetaClass): T | null;
}
export {};
