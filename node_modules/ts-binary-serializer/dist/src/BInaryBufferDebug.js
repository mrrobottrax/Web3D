"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utility_1 = require("./Utility");
var DataType_1 = require("./DataType");
var BinaryBufDbgInfo = /** @class */ (function () {
    function BinaryBufDbgInfo() {
        this.msgs = [];
        this.m_ids = 0;
    }
    BinaryBufDbgInfo.prototype.emitDebugInfo = function (key, iswrite, extra) {
        var lastmsg = this.m_lastmsg;
        if (lastmsg != null && lastmsg.extra === extra && lastmsg.iswrite == iswrite && lastmsg.key === key) {
            lastmsg.count++;
        }
        else {
            var msg = new BinaryBufDbgMsg(this.m_ids, key, iswrite, 1, extra);
            this.m_lastmsg = msg;
            this.msgs.push(msg);
        }
        this.m_ids++;
    };
    BinaryBufDbgInfo.prototype.verifyException = function (derDbgInfo) {
        var sermsgs = this.msgs;
        var dermsgs = derDbgInfo.msgs;
        if (sermsgs.length == dermsgs.length)
            return;
        var errctx = sermsgs.slice(Math.max(0, dermsgs.length - 10), Math.min(dermsgs.length + 5, sermsgs.length));
        console.error("--- verify start ---");
        console.error(">>> [serialize]");
        console.error(BinaryBufDbgInfo.fmtMsgs(errctx));
        console.error(">>> [derserialize]");
        console.log(BinaryBufDbgInfo.fmtMsgs(dermsgs.slice(Math.max(0, dermsgs.length - 10))));
        console.error("--- verify end ---");
    };
    BinaryBufDbgInfo.fmtMsgs = function (msgs) {
        var lines = [];
        msgs.forEach(function (msg) {
            var extra = msg.extra;
            if (extra != null) {
                lines.push("\t[" + msg.id + "] count:" + msg.count + " " + msg.key + " extra:" + extra);
            }
            else {
                lines.push("\t[" + msg.id + "] count:" + msg.count + " " + msg.key);
            }
        });
        return lines.join('\n');
    };
    return BinaryBufDbgInfo;
}());
exports.BinaryBufDbgInfo = BinaryBufDbgInfo;
var BinaryBufDbgMsg = /** @class */ (function () {
    function BinaryBufDbgMsg(id, key, iswrite, count, extra) {
        this.count = 0;
        this.id = 0;
        this.key = key;
        this.iswrite = iswrite;
        this.count = count;
        if (extra != null) {
            this.extra = extra;
        }
        this.id = id;
    }
    return BinaryBufDbgMsg;
}());
exports.BinaryBufDbgMsg = BinaryBufDbgMsg;
var BinaryBufferDebug = /** @class */ (function () {
    function BinaryBufferDebug() {
        this.m_dbginfo = new BinaryBufDbgInfo();
    }
    Object.defineProperty(BinaryBufferDebug.prototype, "dbginfo", {
        get: function () { return this.m_dbginfo; },
        enumerable: true,
        configurable: true
    });
    BinaryBufferDebug.GenPropertyExtra = function (p) {
        if (p.datatype == DataType_1.DataType.Object) {
            var meta = p.pclass;
            var plist_1 = [];
            meta.properties.forEach(function (p) {
                plist_1.push(p.key);
            });
            return p.key + " <" + meta.properties.length + ">[" + plist_1.join(',') + "]";
        }
        else {
            return "" + p.key;
        }
    };
    /**
     * Inject debug info for fast finding the inconsistance between Serialize/Deserialize.
     * Aiming for zero performance decline with debug mode disabled.
     * @param buffer
     */
    BinaryBufferDebug.Gen = function (buffer) {
        var dbuffer = Utility_1.Extends(buffer, BinaryBufferDebug);
        var dbginfo = dbuffer.m_dbginfo;
        for (var key in buffer) {
            (function (key) {
                var p = buffer[key];
                if (typeof p !== 'function')
                    return;
                if (key.startsWith('write')) {
                    if (key === 'writeProperty') {
                        buffer[key] = function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            dbginfo.emitDebugInfo(key, true, BinaryBufferDebug.GenPropertyExtra(args[1]));
                            Reflect.apply(p, buffer, args);
                        };
                    }
                    else {
                        buffer[key] = function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            dbginfo.emitDebugInfo(key, true);
                            Reflect.apply(p, buffer, args);
                        };
                    }
                    return;
                }
                ;
                if (key.startsWith('read')) {
                    if (key === 'readProperty') {
                        buffer[key] = function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            dbginfo.emitDebugInfo(key, false, BinaryBufferDebug.GenPropertyExtra(args[0]));
                            Reflect.apply(p, buffer, args);
                        };
                    }
                    else {
                        buffer[key] = function () {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            dbginfo.emitDebugInfo(key, false);
                            return Reflect.apply(p, buffer, args);
                        };
                    }
                    return;
                }
                ;
            })(key);
        }
        ;
        return dbuffer;
    };
    return BinaryBufferDebug;
}());
exports.BinaryBufferDebug = BinaryBufferDebug;
