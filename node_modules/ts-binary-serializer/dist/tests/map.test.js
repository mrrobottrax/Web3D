"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var DataType_1 = require("../src/DataType");
var SerializeField_1 = require("../src/SerializeField");
var helper_test_1 = require("./helper.test");
var BinarySerializer_1 = require("../src/BinarySerializer");
describe("map", function () {
    it("map-basis", function () {
        var TestObj = /** @class */ (function () {
            function TestObj(t, v) {
                this.type = t;
                this.value = v;
            }
            __decorate([
                SerializeField_1.SerializeField(DataType_1.DataType.String, false)
            ], TestObj.prototype, "type", void 0);
            __decorate([
                SerializeField_1.SerializeField(DataType_1.DataType.Int32, false)
            ], TestObj.prototype, "value", void 0);
            return TestObj;
        }());
        var TestClass = /** @class */ (function () {
            function TestClass() {
            }
            __decorate([
                SerializeField_1.SerializeField(DataType_1.DataType.Map, false, TestObj)
            ], TestClass.prototype, "map", void 0);
            return TestClass;
        }());
        var map = {};
        map['java'] = new TestObj("java", 10);
        map['cahrp'] = { type: "csharp", value: 11 };
        var obj1 = new TestClass();
        obj1.map = map;
        var d = BinarySerializer_1.BinarySerializer.Serialize(obj1, TestClass);
        var obj2 = BinarySerializer_1.BinarySerializer.Deserialize(d, TestClass);
        helper_test_1.verfiy(obj2, obj1);
    });
    it("map-primitive-type", function () {
        var TestClass = /** @class */ (function () {
            function TestClass() {
            }
            __decorate([
                SerializeField_1.SerializeField(DataType_1.DataType.Map, false, DataType_1.DataType.Float32)
            ], TestClass.prototype, "map", void 0);
            return TestClass;
        }());
        var map = {};
        map['111'] = 111;
        map['132.4'] = 132.4;
        map['-12553'] = -12553;
        var obj1 = new TestClass();
        obj1.map = map;
        var d = BinarySerializer_1.BinarySerializer.Serialize(obj1, TestClass);
        var obj2 = BinarySerializer_1.BinarySerializer.Deserialize(d, TestClass);
        helper_test_1.verfiy(obj1, obj2);
    });
});
