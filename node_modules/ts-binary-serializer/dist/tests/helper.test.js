"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var performance = require('perf_hooks').performance;
function verfiy(obj1, obj2) {
    if (obj1 == null || obj2 == null) {
        chai.expect(obj2).to.equal(obj1);
        return;
    }
    var t = typeof obj1;
    if (t === 'string' || t === 'number' || t === 'boolean' || t === 'bigint') {
        chai.expect(obj1).to.eq(obj2);
    }
    for (var key in obj1) {
        var val = obj1[key];
        if (typeof val === "number") {
            chai.expect(obj2[key]).to.closeTo(val, 0.001);
        }
        else if (typeof val === "string") {
            chai.expect(obj2[key]).to.eq(val);
        }
        else if (typeof val === "object") {
            verfiy(obj2[key], val);
        }
    }
}
exports.verfiy = verfiy;
function estimateTime(f, times) {
    if (times === void 0) { times = 1; }
    return estimateTimeInternal(f, times);
}
exports.estimateTime = estimateTime;
function estimateTimeInternal(f, times) {
    if (times === void 0) { times = 1; }
    var t1 = performance.now();
    var ret = null;
    for (var t = 0; t < times; t++) {
        ret = f();
    }
    var t2 = performance.now();
    return [t2 - t1, ret];
}
exports.estimateTimeInternal = estimateTimeInternal;
