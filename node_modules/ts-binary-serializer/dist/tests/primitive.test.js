"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai = __importStar(require("chai"));
var BinarySerializer_1 = require("../src/BinarySerializer");
var Float16_1 = require("../src/Float16");
var DataType_1 = require("../src/DataType");
var SerializeField_1 = require("../src/SerializeField");
var expect = chai.expect;
var ClassA = /** @class */ (function () {
    function ClassA() {
    }
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.String)
    ], ClassA.prototype, "mstr", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Bool)
    ], ClassA.prototype, "mbool", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float16)
    ], ClassA.prototype, "mfloat16", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float32)
    ], ClassA.prototype, "mfloat32", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float64)
    ], ClassA.prototype, "mfloat64", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Int8)
    ], ClassA.prototype, "mint8", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Int16)
    ], ClassA.prototype, "mint16", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Int32)
    ], ClassA.prototype, "mint32", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Uint8)
    ], ClassA.prototype, "muint8", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Uint16)
    ], ClassA.prototype, "muint16", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Uint32)
    ], ClassA.prototype, "muint32", void 0);
    return ClassA;
}());
describe('primitive-type', function () {
    var obja = new ClassA();
    obja.mbool = false;
    obja.mstr = "helloworld";
    obja.mfloat16 = 0.257;
    obja.mfloat32 = 0.1548221;
    obja.mfloat64 = 355461.4811137;
    obja.mint8 = -127;
    obja.muint8 = 255;
    obja.mint16 = -23324;
    obja.muint16 = 65535;
    obja.mint32 = -(1 << 16);
    obja.muint32 = 1 << 31 - 1;
    var buffer = BinarySerializer_1.BinarySerializer.Serialize(obja, ClassA);
    var objb = BinarySerializer_1.BinarySerializer.Deserialize(buffer, ClassA);
    it("bool", function () {
        expect(objb.mbool).to.eq(obja.mbool);
    });
    it("string", function () {
        expect(objb.mstr).to.eq(obja.mstr);
    });
    it("float16", function () {
        expect(objb.mfloat16).to.closeTo(obja.mfloat16, 0.001);
    });
    it("float32", function () {
        expect(objb.mfloat32).to.closeTo(obja.mfloat32, 0.0000001);
    });
    it("float64", function () {
        expect(objb.mfloat64).to.closeTo(obja.mfloat64, 0.000000000000001);
    });
    it("int8", function () {
        expect(objb.mint8).to.eq(obja.mint8);
    });
    it("int16", function () {
        expect(objb.mint16).to.eq(obja.mint16);
    });
    it("int32", function () {
        expect(objb.mint32).to.eq(obja.mint32);
    });
    it("uint8", function () {
        expect(objb.muint8).to.eq(obja.muint8);
    });
    it("uint16", function () {
        expect(objb.muint16).to.eq(obja.muint16);
    });
    it("uint32", function () {
        expect(objb.muint32).to.eq(obja.muint32);
    });
});
describe('float16', function () {
    var verify = function (b, tar) {
        var r = Float16_1.Float16.ByteToFloat16(b);
        var s = Float16_1.Float16.Float16ToByte(tar);
        expect(s).to.eq(b);
        if (tar === Infinity || tar === -Infinity) {
            expect(r).to.eq(tar);
        }
        else {
            expect(r).to.closeTo(tar, 0.001);
        }
    };
    it('testsample', function () {
        verify(15361, 1.0009765625);
        verify(49152, -2);
        verify(31743, 65504);
        verify(15360, 1);
        verify(32768, -0);
        verify(31744, Infinity);
        verify(64512, -Infinity);
        verify(0, 0);
        verify(1024, 0.00006103515625);
        verify(13653, 0.333251953125);
        verify(1023, 0.00006097555160522461);
        verify(1, 5.960464477539063e-8);
        verify(48129, -1.0009765625);
        verify(16384, 2);
        verify(64511, -65504);
        verify(48128, -1);
        verify(33792, -0.00006103515625);
        verify(46421, -0.333251953125);
        verify(33791, -0.00006097555160522461);
        verify(32769, -5.960464477539063e-8);
    });
});
var LargeData = /** @class */ (function () {
    function LargeData() {
    }
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float64, true)
    ], LargeData.prototype, "numary", void 0);
    return LargeData;
}());
describe('large-data', function () {
    var data = new LargeData();
    var ary = new Array();
    for (var i = 0; i < 300; i++) {
        ary.push(Math.random());
    }
    data.numary = ary;
    var serializedData = BinarySerializer_1.BinarySerializer.Serialize(data);
    var deserializeObj = BinarySerializer_1.BinarySerializer.Deserialize(serializedData, LargeData);
    var dary = deserializeObj.numary;
    it('large-array', function () {
        expect(dary.length).to.eq(ary.length);
        for (var i_1 = 0, len = dary.length; i_1 < len; i_1++) {
            expect(dary[i_1]).to.closeTo(ary[i_1], 0.000000001);
        }
    });
});
//----------------------
var AttatchType = /** @class */ (function () {
    function AttatchType() {
    }
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float32)
    ], AttatchType.prototype, "num", void 0);
    return AttatchType;
}());
describe('attatch-type', function () {
    //prototype: [AttatchType]
    var obj1 = new AttatchType();
    obj1.num = 10;
    //prototype: [Object]
    var jstr = '{"num":10}';
    var obj2 = JSON.parse(jstr);
    //prototype: [Object]
    var obj3 = { num: 10 };
    //prototype: null;
    var obj4 = Object.create(null);
    obj4.num = 10;
    //prototype: [AttatchType]
    var obj5 = {};
    Object.setPrototypeOf(obj5, Object.getPrototypeOf(new AttatchType()));
    obj5['num'] = 10;
    var d1 = BinarySerializer_1.BinarySerializer.Deserialize(BinarySerializer_1.BinarySerializer.Serialize(obj1), AttatchType);
    var d2 = BinarySerializer_1.BinarySerializer.Deserialize(BinarySerializer_1.BinarySerializer.Serialize(obj2, AttatchType), AttatchType);
    var d3 = BinarySerializer_1.BinarySerializer.Deserialize(BinarySerializer_1.BinarySerializer.Serialize(obj3, AttatchType), AttatchType);
    var d4 = BinarySerializer_1.BinarySerializer.Deserialize(BinarySerializer_1.BinarySerializer.Serialize(obj4, AttatchType), AttatchType);
    var d5 = BinarySerializer_1.BinarySerializer.Deserialize(BinarySerializer_1.BinarySerializer.Serialize(obj5), AttatchType);
    it('new()', function () {
        expect(d1.num).to.eq(10);
    });
    it('json-parse', function () {
        expect(d2.num).to.eq(10);
    });
    it('anonymous-object', function () {
        expect(d3.num).to.eq(10);
    });
    it('object-create', function () {
        expect(d4.num).to.eq(10);
    });
    it('object-set-prototype', function () {
        expect(d5.num).to.eq(10);
    });
});
//-----------------------------------------------
var ClassWithArray = /** @class */ (function () {
    function ClassWithArray() {
    }
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float32, true)
    ], ClassWithArray.prototype, "ary1", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float32, true)
    ], ClassWithArray.prototype, "ary2", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float32, true)
    ], ClassWithArray.prototype, "emptyAry", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.Float32, true)
    ], ClassWithArray.prototype, "nullAry", void 0);
    return ClassWithArray;
}());
describe("array", function () {
    var obj = new ClassWithArray();
    obj.ary1 = [10];
    obj.ary2 = [10];
    obj.emptyAry = [];
    var d = BinarySerializer_1.BinarySerializer.Serialize(obj);
    var d1 = BinarySerializer_1.BinarySerializer.Deserialize(d, ClassWithArray);
    it('Array<T>', function () {
        expect(d1.ary1[0]).to.eq(10);
    });
    it('number[]', function () {
        expect(d1.ary2[0]).to.eq(10);
    });
    it('empty array', function () {
        expect(d1.emptyAry.length).to.eq(0);
    });
    it('null array', function () {
        expect(d1.nullAry).to.null;
    });
});
//-------------------------
var ClassWithTypedArray = /** @class */ (function () {
    function ClassWithTypedArray() {
    }
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Uint8Array)
    ], ClassWithTypedArray.prototype, "uint8", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Uint16Array)
    ], ClassWithTypedArray.prototype, "uint16", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Uint32Array)
    ], ClassWithTypedArray.prototype, "uint32", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Int8Array)
    ], ClassWithTypedArray.prototype, "int8", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Int16Array)
    ], ClassWithTypedArray.prototype, "int16", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Int32Array)
    ], ClassWithTypedArray.prototype, "int32", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Float32Array)
    ], ClassWithTypedArray.prototype, "float32", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, false, Float64Array)
    ], ClassWithTypedArray.prototype, "float64", void 0);
    __decorate([
        SerializeField_1.SerializeField(DataType_1.DataType.TypedArray, true, Uint8Array)
    ], ClassWithTypedArray.prototype, "arrayUint8Array", void 0);
    return ClassWithTypedArray;
}());
describe("TypedArray", function () {
    var uint8 = new Uint8Array([0, 255]);
    var uint16 = new Uint16Array([65535, 0, 32767]);
    var uint32 = new Uint32Array([4294967295, 0, 4332]);
    var int8 = new Int8Array([-128, 127, 0]);
    var int16 = new Int16Array([-32758, 32767, 0]);
    var int32 = new Int32Array([-2147483648, 2147483647, 0]);
    var float32 = new Float32Array([0.435, -546556.33, 67663.2324443]);
    var float64 = new Float64Array([0.435, -546556.33, 67663.2324443]);
    var arrayUint8Array = [new Uint8Array([0, 255]), new Uint8Array([126, 233])];
    var obj = new ClassWithTypedArray();
    obj.uint8 = uint8;
    obj.uint16 = uint16;
    obj.uint32 = uint32;
    obj.int8 = int8;
    obj.int16 = int16;
    obj.int32 = int32;
    obj.float32 = float32;
    obj.float64 = float64;
    obj.arrayUint8Array = arrayUint8Array;
    var binarydata = BinarySerializer_1.BinarySerializer.Serialize(obj, ClassWithTypedArray);
    var newobj = BinarySerializer_1.BinarySerializer.Deserialize(binarydata, ClassWithTypedArray);
    it("uint8", function () { return expectArrayBuffer(newobj.uint8, uint8); });
    it("uint16", function () { return expectArrayBuffer(newobj.uint16, uint16); });
    it("uint32", function () { return expectArrayBuffer(newobj.uint32, uint32); });
    it("int8", function () { return expectArrayBuffer(newobj.int8, int8); });
    it("int16", function () { return expectArrayBuffer(newobj.int16, int16); });
    it("int32", function () { return expectArrayBuffer(newobj.int32, int32); });
    it("float32", function () { return expectArrayBuffer(newobj.float32, float32); });
    it("float64", function () { return expectArrayBuffer(newobj.float64, float64); });
    it("arrayUint8Array", function () {
        expectArrayBuffer(newobj.arrayUint8Array[0], arrayUint8Array[0]);
        expectArrayBuffer(newobj.arrayUint8Array[1], arrayUint8Array[1]);
    });
});
function expectArrayBuffer(a, b) {
    var len = a.byteLength;
    var abuffer = a.buffer;
    var bbuffer = b.buffer;
    for (var t = 0; t < len; t++) {
        expect(abuffer[t]).eq(bbuffer[t]);
    }
}
// describe('benchmark', () => {
//     fs.readFile('./testdata/sample-data.json', (e, buffer) => {
//         let jsonstr = buffer.toString();
//         let t1 = performance.now();
//         let obj = JSON.parse(jsonstr);
//         console.log(`json deserialize: ${performance.now() - t1} ms`);
//         let t0 = performance.now();
//         let jstr = JSON.stringify(obj);
//         console.log(`json serialize: ${performance.now() - t0} ms`);
//         let jsonsize = buffer.byteLength;
//         console.log('json size: ' + jsonsize + " byte");
//         let datainfo: DataInfo = <DataInfo>obj;
//         let t2 = performance.now();
//         let serializedData = BinarySerialize(datainfo, DataInfo);
//         console.log(`binary serialize: ${performance.now() - t2} ms`);
//         let t3 = performance.now();
//         let obj1 = BinaryDeserialize(DataInfo, serializedData);
//         console.log(`binary deserialize: ${performance.now() - t3} ms`);
//         let binarysize = serializedData.byteLength;
//         console.log('binary size: ' + binarysize + " byte");
//         console.log('size save: ' + ((jsonsize - binarysize) / jsonsize));
//     });
// })
//--------------------------------------
